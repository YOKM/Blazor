#pragma checksum "E:\Projects\BLAZOR\ImagingTaskSchedule\ImagingTaskSchedule.Client\Pages\ImagingScheduleTask.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cdb1c99cc05862e80528234644c296786f5d9b8c"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ImagingTaskSchedule.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using ImagingTaskSchedule.Client;
    using ImagingTaskSchedule.Client.Shared;
    using ImagingTaskSchedule.Shared;
    using ImagingTaskSchedule.Shared.Models;
    using Microsoft.AspNetCore.Blazor.Browser;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/ImagingTasks")]
    public class ImagingScheduleTask : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 381 "E:\Projects\BLAZOR\ImagingTaskSchedule\ImagingTaskSchedule.Client\Pages\ImagingScheduleTask.cshtml"
 
    string InputPath = "";
    ImagingScheduleJob[] MasterTask;
    ImagingJobdetails[] DetailsTask;

    ImagingScheduleJob MasterJob_APIdata = new ImagingScheduleJob();
    ImagingJobdetails DetailJob_APIdata = new ImagingJobdetails();

    int JobId = 0;
    int CurrentDetailsJobID = 0;

    string Imagename = "Images/expand.png";
    string ImageSortname = "Images/sort_ascending.png";
    bool showDetails = false;
    string ShowEditWindow = "";

    string closeMessage = "";
    string Messages = "";
    bool sortStatus = false;

    protected override async Task OnInitAsync()
    {
        MasterTask = await Http.GetJsonAsync<ImagingScheduleJob[]>("/api/ImagingScheduleJobs/");
        MasterJob_APIdata = new ImagingScheduleJob();
        DetailJob_APIdata = new ImagingJobdetails();

    }

    protected async Task getTaskDetails(int JobId_fromMasterAPI)
    {

        if (JobId != JobId_fromMasterAPI)
        {
            Imagename = "Images/expand.png";
            showDetails = true;

        }
        else
        {
            if (showDetails == false)
            {
                Imagename = "Images/expand.png";

                showDetails = true;

            }
            else
            {
                Imagename = "Images/toggle.png";
                showDetails = false;
            }

        }



        // from an array we find the JobId , the whole table is load in the Json file.
        JobId = JobId_fromMasterAPI;
        DetailsTask = await Http.GetJsonAsync<ImagingJobdetails[]>("api/ImagingJobdetails/" + Convert.ToInt32(JobId));





    }

    void CloseEditWindow()
    {

        ShowEditWindow = "Close";

    }

    void Editwindow()
    {
        ShowEditWindow = "Open";

        //  ordsM = await Http.GetJsonAsync<OrderMasters>("/api/OrderMasters/" + Convert.ToInt32(OrderNos));

        // MasterJob_APIdata = await Http.GetJsonAsync<ImagingScheduleTask>("/api/");

    }

    // open edit Window get Data from APi into form
    protected async Task EditTaskMaster(int jobidOnGrid)
    {
        ShowEditWindow = "Open";
        showDetails = false;
        Console.WriteLine("console ID Job on GRID: " + jobidOnGrid.ToString());
        // MasterJob_APIdata = new ImagingScheduleJob();
        MasterJob_APIdata = await Http.GetJsonAsync<ImagingScheduleJob>("/api/ImagingScheduleJobs/" + Convert.ToInt32(jobidOnGrid));
        Console.WriteLine(MasterJob_APIdata.Id + " Master jobname " + MasterJob_APIdata.Jobname);



        DetailJob_APIdata = await Http.GetJsonAsync<ImagingJobdetails>("/api/ImagingJobdetails1/" + Convert.ToInt32(MasterJob_APIdata.Id));
        Console.WriteLine(DetailJob_APIdata.Jobid +  " Detail jobname " + DetailJob_APIdata.Jobname);
    }


    protected async Task SaveTask()
    {

        if (MasterJob_APIdata.Id == 0)
        {
            await Http.SendJsonAsync(HttpMethod.Post, "/api/ImagingScheduleJobs/", MasterTask);
            await Http.SendJsonAsync(HttpMethod.Post, "api/ImagingJobdetails/", DetailsTask);
        }
        else
        {
            await Http.SendJsonAsync(HttpMethod.Put,"/api/ImagingScheduleJobs/"+ MasterJob_APIdata.Id,MasterJob_APIdata);
            await Http.SendJsonAsync(HttpMethod.Put, "/api/ImagingJobdetails/" + DetailJob_APIdata.Id,DetailJob_APIdata);
        }
        MasterJob_APIdata = new ImagingScheduleJob();
        MasterTask = await Http.GetJsonAsync<ImagingScheduleJob[]>("/api/ImagingScheduleJobs/");


        //Details Info 

        DetailsTask = await Http.GetJsonAsync<ImagingJobdetails[]>("api/ImagingJobdetails/" + DetailJob_APIdata.Id);
        DetailJob_APIdata = new ImagingJobdetails();

        ShowEditWindow = "Close";
    }


    /*filtering part on the table..
    will set filtering only on Jobname.
        */

    void onJobnameChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        Console.WriteLine("values from on Jobchange UIChangeEvents: " + values);

        JobNameFilteringlist(values, "Jobname");

    }

    protected async Task JobNameFilteringlist(string Value,string columnName)
    {
        MasterTask = await Http.GetJsonAsync<ImagingScheduleJob[]>("/api/ImagingScheduleJobs/");

        if (Value.Trim().Length > 0)
        {
            switch (columnName)
            {
                case "Jobname":
                    //MasterTask = MasterTask.Where(x => x.Jobname.Contains(Value)).ToArray();
                    MasterTask = MasterTask.Where(x => x.Jobname.ToLowerInvariant().Contains(Value.ToLowerInvariant())).ToArray();
                    break;

            }
        }
        else
        {

            MasterTask = await Http.GetJsonAsync<ImagingScheduleJob[]>("/api/ImagingScheduleJobs/");

        }
    }

    protected async Task JobSorting(string sortColumn)
    {
        MasterTask = await Http.GetJsonAsync<ImagingScheduleJob[]>("/api/ImagingScheduleJobs/");
        if (sortStatus)
        {
            ImageSortname = "Images/sort_descending.png";
            sortStatus = false;
            switch (sortColumn)
            {

                case "JobName":
                    MasterTask = MasterTask.OrderBy(x => x.Jobname).ToArray();
                    break;

            }
        }
        else
        {
            ImageSortname = "Images/sort_ascending.png";

            sortStatus = true;
            switch (sortColumn)
            {
                case "JobName":
                    MasterTask = MasterTask.OrderByDescending(x => x.Jobname).ToArray();
                    break;
            }


        }


    }


#line default
#line hidden
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
